#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 5.4
#  in conjunction with Tcl version 8.6
#    Oct 16, 2020 06:39:44 AM GMT  platform: Windows NT
#    Oct 16, 2020 09:04:59 AM GMT  platform: Windows NT
#    Oct 16, 2020 09:26:05 AM GMT  platform: Windows NT
#    Oct 19, 2020 01:41:52 AM GMT  platform: Windows NT
#    Oct 19, 2020 02:29:19 AM GMT  platform: Windows NT
#    Oct 19, 2020 02:40:26 AM GMT  platform: Windows NT
#    Oct 30, 2020 11:19:12 AM +07  platform: Linux
#    Nov 02, 2020 08:24:35 AM +07  platform: Linux
import psutil
import sys
import os
from tkinter import messagebox
from datetime import datetime
from JETSON.API import *
agv=AGV()
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

    update_clock()
    
    sys.stdout.flush()



    
def engSetting():
    #print('main_support.engSetting')
    w.settingButton.configure(text='''SETTING''')
    w.showButton.configure(text='''INFORMATION''')
    w.peripheralButton.configure(text='''PERIPHERAL''')
    
    w.selectOption.configure(text='''SELECT OPTION''')
    w.exitButton.configure(text='''EXIT''')
    w.startButton.configure(text='''START''')
    w.stopButton.configure(text='''STOP''')
    w.selectControl.configure(text='''CONTROL''')
    sys.stdout.flush()

def vietSetting():
    #print('main_support.vietSetting')
    w.settingButton.configure(text='''CÀI ĐẶT''')
    w.showButton.configure(text='''THÔNG TIN''')
    w.peripheralButton.configure(text='''NGOẠI VI''')
    w.selectOption.configure(text='''TÙY CHỌN''')
    w.exitButton.configure(text='''THOÁT''')
    w.startButton.configure(text='''BẮT ĐẦU''')
    w.stopButton.configure(text='''DỪNG LẠI''')
    w.selectControl.configure(text='''ĐIỀU KHIỂN''')
  
    sys.stdout.flush()

def setting():
    #print('main_support.setting')
    sys.stdout.flush()
    

    import login
    login.create_LOGIN(root)
   
   
def show():
    #print('main_support.show')

    sys.stdout.flush()
    import selectInformation
    selectInformation.create_SELECTINFORMATION(root)
def peripheral():
    #print('main_support.peripheral')
    import peripheral
    peripheral.create_PERIPHERAL(root)

    sys.stdout.flush()

def quit():
    #print('main_support.quit')
   
   
    MsgBox=tk.messagebox.askquestion ('Exit Application','Are you sure you want to exit the application',icon = 'warning')
    
    if MsgBox == 'yes':
       os.system('dbus-send --type=method_call --dest=org.onboard.Onboard /org/onboard/Onboard/Keyboard org.onboard.Onboard.Keyboard.Hide') 
       exit()
    else:
        os.system('dbus-send --type=method_call --dest=org.onboard.Onboard /org/onboard/Onboard/Keyboard org.onboard.Onboard.Keyboard.Hide')
        tk.messagebox.showinfo('Return','You will now return to the application screen')
    
    sys.stdout.flush()
    os.system('dbus-send --type=method_call --dest=org.onboard.Onboard /org/onboard/Onboard/Keyboard org.onboard.Onboard.Keyboard.Hide')

    sys.stdout.flush()

def startProgram():
    print('main_support.startProgram')
    agv.start_AGV()
    sys.stdout.flush()

def stopProgram():
    print('main_support.stopProgram')
    #agv.stop_AGV()
    agv.Send_Speed(90,54,54)
    sys.stdout.flush()

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None
def update_clock():
    now = datetime.now()
    dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
    
    try:
        #speed,baterry_level=agv.Read_basic_information_batterry()
        w.pinLabel.configure(text=int(6))
    except Exception as e:
        print(e)

    w.timeLabel.configure(text=dt_string)
    root.after(1000,update_clock)

    
if __name__ == '__main__':
    import main
    main.vp_start_gui()
    





